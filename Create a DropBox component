Step 1: Create a DropBox Component

1. Generate a new component in your Angular project:

    bash
    Copy code
    ng generate component DropBox

2. Update the generated files as follows:


----------------------------------------------------------------------------------
drop-box.component.html
The template for the dropbox and draggable items:

[html]


<div id="dropbox" (dragover)="onDragOver($event)" (drop)="onDrop($event)">
  Drop items here
</div>

<div id="items">
  <div
    *ngFor="let item of draggableItems"
    [id]="item.id"
    class="draggable"
    draggable="true"
    (dragstart)="onDragStart($event, item.id)"
  >
    {{ item.label }}
  </div>
</div>


----------------------------------------------------------------------------------
drop-box.component.scss
CSS styles for the dropbox and draggable items:

[scss]


#dropbox {
  width: 300px;
  height: 300px;
  border: 2px dashed #ccc;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  position: relative;
  transition: border-color 0.3s ease;

  &.drag-over {
    border-color: blue;
  }

  .draggable {
    width: 80%;
    height: 80%;
    transition: all 0.3s ease;
  }
}

.draggable {
  width: 100px;
  height: 100px;
  background-color: lightblue;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: grab;
  margin: 10px;
  transition: transform 0.3s ease;
}


----------------------------------------------------------------------------------
drop-box.component.ts
TypeScript logic for the component:

[typescript]


import { Component } from '@angular/core';

@Component({
  selector: 'app-drop-box',
  templateUrl: './drop-box.component.html',
  styleUrls: ['./drop-box.component.scss'],
})
export class DropBoxComponent {
  draggableItems = [
    { id: 'item1', label: 'Item 1' },
    { id: 'item2', label: 'Item 2' },
    { id: 'item3', label: 'Item 3' },
  ];

  onDragStart(event: DragEvent, itemId: string): void {
    event.dataTransfer?.setData('text/plain', itemId);
  }

  onDragOver(event: DragEvent): void {
    event.preventDefault(); // Allow the drop action
    const dropbox = event.target as HTMLElement;
    dropbox.classList.add('drag-over');
  }

  onDrop(event: DragEvent): void {
    event.preventDefault();

    const dropbox = event.target as HTMLElement;
    dropbox.classList.remove('drag-over');

    // Retrieve the ID of the dragged item
    const itemId = event.dataTransfer?.getData('text/plain');
    const draggedItem = document.getElementById(itemId!);

    if (draggedItem) {
      // Append the dragged item to the dropbox
      dropbox.appendChild(draggedItem);

      // Resize the dropped item
      draggedItem.style.width = '80%';
      draggedItem.style.height = '80%';
    }
  }
}


=========================================================================================
Step 2: Update the Parent Module
Include the DropBoxComponent in the declarations of your module (e.g., app.module.ts).

[typescript]


import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { DropBoxComponent } from './drop-box/drop-box.component';

@NgModule({
  declarations: [
    AppComponent,
    DropBoxComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}


----------------------------------------------------------------------------------
Explanation
1. TypeScript Logic:
  - The onDragStart method sets the itemId in the drag event's dataTransfer.
  - The onDragOver method prevents the default behavior, allowing the drop.
  - The onDrop method appends the dragged item to the dropbox and resizes it by modifying the style properties.

2. Angular Template:
   - The *ngFor directive dynamically generates draggable items.
   - Event bindings like (dragstart) and (drop) handle the drag-and-drop events.

3. Styling:
  - Items are styled with CSS to ensure they resize smoothly when dropped.
